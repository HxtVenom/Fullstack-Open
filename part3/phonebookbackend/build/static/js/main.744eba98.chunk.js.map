{"version":3,"sources":["services/personsService.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","axios","get","then","response","data","newPerson","post","id","delete","obj","put","Notification","notif","className","type","message","Filter","props","value","send","onChange","PersonForm","name","number","nameChange","onNameChange","numberChange","onNumberChange","click","onClick","Persons","persons","pe","search","se","del","onDel","personsFilter","filter","person","p","toLowerCase","s","includes","map","key","window","confirm","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setSearch","notification","setNotification","useEffect","personService","initialPeople","event","target","preventDefault","personOBJ","x","indexOf","y","returnedPerson","newNotification","console","log","concat","setTimeout","returned","newNotif","catch","error","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.744eba98.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst baseURL = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseURL);\n  return request.then(response => response.data);\n};\n\nconst add = newPerson => {\n  const request = axios.post(baseURL, newPerson);\n  return request.then(response => response.data);\n};\n\nconst del = id => {\n  const request = axios.delete(`${baseURL}/${id}`, id);\n  return request.then(response => response.data);\n};\n\nconst update = (id, obj) => {\n  const request = axios.put(`${baseURL}/${id}`, obj);\n  return request.then(response => response.data);\n};\n\nexport default { getAll, add, del, update };\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/personsService\";\n\nconst Notification = ({ notif }) => {\n  if (notif === null) {\n    return null;\n  }\n\n  return (\n    <div className={notif.type}>\n      <p>{notif.message}</p>\n    </div>\n  );\n};\n\nconst Filter = props => {\n  return (\n    <div>\n      Filter by <input value={props.send} onChange={props.onChange} />\n    </div>\n  );\n};\n\nconst PersonForm = props => {\n  const name = props.name;\n  const number = props.number;\n  const nameChange = props.onNameChange;\n  const numberChange = props.onNumberChange;\n  const click = props.onClick;\n\n  return (\n    <form>\n      <div>\n        name: <input value={name} onChange={nameChange} />\n      </div>\n      <div>\n        number: <input value={number} onChange={numberChange} />\n      </div>\n      <div>\n        <button type=\"submit\" onClick={click}>\n          add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nconst Persons = props => {\n  const persons = props.pe;\n  const search = props.se;\n  const del = props.onDel;\n  const personsFilter = persons.filter(person => {\n    const p = person.name.toLowerCase();\n    const s = search.toLowerCase();\n    if (p.includes(s)) {\n      return person.name;\n    }\n\n    return null;\n  });\n  const people = () =>\n    personsFilter.map(person => (\n      <p key={person.name}>\n        {person.name} {person.number}\n        <button\n          onClick={() => {\n            const val = window.confirm(\n              `Are you sure you wish to delete ${person.name}`\n            );\n            if (val) {\n              del(person);\n            }\n          }}\n        >\n          Delete\n        </button>\n      </p>\n    ));\n  return <div>{people()}</div>;\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [notification, setNotification] = useState({});\n\n  useEffect(() => {\n    personService.getAll().then(initialPeople => {\n      setPersons(initialPeople);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearch = event => {\n    setSearch(event.target.value);\n  };\n\n  const handleNameAdd = event => {\n    event.preventDefault();\n    const personOBJ = {\n      name: newName,\n      number: newNumber\n    };\n    let x = persons.map(person => person.name);\n    x = x.indexOf(newName);\n    if (x >= 0) {\n      const y = window.confirm(\n        newName +\n          \" is already added to your phonebook, would you like to update with new number?\"\n      );\n      const id = persons[x].id;\n      if (y) {\n        personService.update(id, personOBJ).then(returnedPerson => {\n          setPersons(\n            persons.map(person => (person.id !== id ? person : returnedPerson))\n          );\n          const newNotification = {\n            message: `Successfully updated ${returnedPerson.name}'s number!`,\n            type: \"success\"\n          };\n          setNotification(newNotification);\n        });\n      }\n    } else {\n      console.log(\"Button Clicked\", event.target);\n      personService.add(personOBJ).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson));\n        const newNotification = {\n          message: `Successfully added ${returnedPerson.name}' to your phonebook!`,\n          type: \"success\"\n        };\n        setNotification(newNotification);\n      });\n    }\n    setTimeout(() => setNotification({}), 5000);\n    setNewName(\"\");\n    setNewNumber(\"\");\n  };\n\n  const handleDelete = person => {\n    personService\n      .del(person.id)\n      .then(returned => {\n        setPersons(persons.filter(p => p.id !== person.id));\n        const newNotif = {\n          message: `${person.name} has been deleted from the server!`,\n          type: \"success\"\n        };\n        setNotification(newNotif);\n      })\n      .catch(error => {\n        const newNotif = {\n          message: `${person.name} has already been deleted from the server!`,\n          type: \"error\"\n        };\n        setNotification(newNotif);\n      });\n\n    setTimeout(() => setNotification({}), 5000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notif={notification} />\n      <Filter send={search} onChange={handleSearch} />\n      <h3>Add A New Contact</h3>\n      <PersonForm\n        name={newName}\n        number={newNumber}\n        onNameChange={handleNameChange}\n        onNumberChange={handleNumberChange}\n        onClick={handleNameAdd}\n      />\n      <h3>Numbers</h3>\n      <Persons pe={persons} se={search} onDel={handleDelete} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}